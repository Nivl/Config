[color]
	diff = auto
	status = auto
	branch = auto
[user]
	name = Melvin Laplanche
	email = melvin.wont.reply@gmail.com
	signingkey = 2C307E0D0413344B
	# signingkey = C47FAEFC422AFA82 # Y1 - need to import public key
[alias]
	la = "!git config -l | grep alias | cut -c 7-" # list of aliases
	lg = log --color --graph --pretty=format:'%C(yellow)%h%Creset %s - %C(bold blue)%an%Creset' --abbrev-commit #logs
	st = status
	since = "!f() { git log --pretty=format:'%h %<(20)%an %s%n%w(0,10,10)%b%n' $1^..HEAD | sed -e ':a' -e 'N' -e '$!ba' -E -e 's/\\n +(\\n\\n([a-f]|[0-9]){9} )/\\1/g'; }; f" # list all commits since $1

	# cherry-pick
	cp = cherry-pick
	cpc = cherry-pick --continue
	cpa = cherry-pick --abort

	# fetch
	fo = fetch origin # fetch remote changes ("fo master" for the remote change on a master)
	fom = fetch origin master # fetch remote for master
	foc = "!f() { fetch origin `git rev-parse --abbrev-ref HEAD`; }; f"

	# rev-parse
	rp = rev-parse
	shaof = rev-parse # display head sha of a branch / extends sha from short format

	# checkout
	co = checkout
	cob = checkout -b # create a new branch
	com = checkout master # switch to master
	cop = checkout -

	# Switch branch
	sw = switch
	swc = switch -c # create a new branch
	swm = switch master
	swp = switch -

	# Branches
	br = branch
	brn = checkout -b # create a new branch, same as cob
	brr = branch -m # rename a branch locally

	# clone
	cl = "!f() { git clone git@github.com:$1.git ; }; f" #
	clb = "!f() { git clone --bare git@github.com:$1.git ; }; f"

	# tag
	tg = "!f() { git tag -a v$1 -m \"Release version $1\" ; }; f"

	# commit
	ci = commit
	cir = "!f() { if [ ! -z \"$(git diff --name-only --cached)\" ]; then git rebase -i HEAD~1; else git commit --amend; fi; }; f"  # rename last commit. git rebase is only here to throw a nice error message
	cim = "!f() { git commit -m \"$*\"; }; f" # commit staged with an inline message
	cif = commit --fixup # attach staged to a specific commit sha
	ciu = "commit --amend --no-edit" # add staged changes to the previous commit
	cia = "commit -a" # commit all
	ciam = "!f() { git commit -am \"$*\"; }; f" # commit all with an inline message
	ciaf = commit -a --fixup  # attach all to a specific commit sha
	ciau = "commit -a --amend --no-edit"  # add all changes to the previous commit

	# Put the last X commit into their parents:
	# A -> B -> C -> D => git fixup 2 => A -> B
	fixup = "!f(){ git reset --soft HEAD~${1} && git commit --amend -C HEAD; };f"

	# rebase
	rb = "rebase" # rebase all the commits up to SHA $1 (excluded)
	rbs = "!f() { git rebase -i $1; }; f" # rebase all the commits up to SHA $1 (excluded)
	rbx = "!f() { git rebase -i HEAD~$1; }; f" # rebase the last $1 commits
	rbm = "!f() { git rebase `git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'`; }; f"
	rbc = rebase --continue
	rba = rebase --abort
	# https://stackoverflow.com/a/22593321/382879
	# example rebase --onto origin/master HEAD~4
	# This will change the base to be origin/master and apply the last 4 commits on it
	rbo = rebase --onto # rebase --onto source-branche HEAD~X
	# if curr branch depends on branch $1 that has been squashed into master
	# and if branch $1 still exists
	rbf = "!f() { git rebase --onto `git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'` $1 `git rev-parse --abbrev-ref HEAD`; }; f"

	# merge
	me = "merge --no-edit"
	mem = "!f() { git merge `git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/@@'` --no-edit; }; f"
	mec = "merge --continue"
	mea = "merge --abort"

	# reset
	re = reset
	res = reset --soft
	reh = reset --hard
	rer = "!f() { git reset --hard origin/`git rev-parse --abbrev-ref HEAD`; }; f"
	rem = "!f() { git fetch origin `git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'` && git reset --hard `git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/@@'`; }; f"

	# stashing
	shu = stash --include-untracked
	shp = stash pop
	shd = stash drop
	shl = stash list

	# pull updates
	get = pull --rebase
	plm = "!f() { git pull origin $(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'); }; f"
	plmr = "!f() { git pull origin $(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@') --rebase; }; f"
	plf = pull -s recusrsive -Xtheirs

	# worktrees
	wtl = "worktree list"
	wtae = "!f() { git worktree add \"$(git rev-parse --show-toplevel)/../wt/$(basename $(git rev-parse --show-toplevel))/$1\" \"$1\" && echo Worktree created at \"$(git rev-parse --show-toplevel)/../wt/$(basename $(git rev-parse --show-toplevel))/$1\"; }; f"
	wtan = "!f() { git worktree add -b \"$1\" \"$(git rev-parse --show-toplevel)/../wt/$(basename $(git rev-parse --show-toplevel))/$1\" && echo Worktree created at \"$(git rev-parse --show-toplevel)/../wt/$(basename $(git rev-parse --show-toplevel))/$1\"; }; f"
	wtrm = "!f() { if [ -n \"$1\" ]; then rm -rf \"$(git rev-parse --show-toplevel)/../wt/$(basename $(git rev-parse --show-toplevel))/$1\"; fi; git worktree prune; }; f"
[push]
	default = simple
[commit]
	gpgsign = true
[rebase]
	autosquash = true
[merge]
	conflictstyle = diff3
[core]
	pager = diff-so-fancy | less --tabs=4 -RFX
[init]
	defaultBranch = main
[pull]
	rebase = false
# Needed to deals with private repos in Go.
# We force github to use ssh
# Not enabled by default in the default config
# as it messes with the install script (breaks brew install)
# [url "ssh://git@github.com/"]
# 	insteadOf = https://github.com/
